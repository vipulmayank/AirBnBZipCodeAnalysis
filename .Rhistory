ggtitle("Average Cost of Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Cost", x = "Zipcode") +
theme_classic2() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =        element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(medianCost)
revenue_analysis <- finalData
occupancy_rate <- 0.75
Year_days <- 365 # number of days in a year
# Generate the revenue for a year per property
revenue_analysis$revenue_per_year <- occupancy_rate*Year_days*revenue_analysis$per_night_price
# Obtain the Revenue/Cost ratio
revenue_analysis$revenue_cost_ratio <- ((revenue_analysis$revenue_per_year)/(revenue_analysis$current_price))
# Breakeven period
revenue_analysis$breakeven_point <- (revenue_analysis$current_price/(revenue_analysis$revenue_per_year - (occupancy_rate*52*revenue_analysis$cleaning_fee)))
# Revenue earned over 5 years
revenue_analysis$year_5 <- ((revenue_analysis$revenue_per_year*5) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 10 years
revenue_analysis$year_10 <- ((revenue_analysis$revenue_per_year*10) - (10*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 15 years
revenue_analysis$year_15 <- ((revenue_analysis$revenue_per_year*15) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 20 years
revenue_analysis$year_20 <- ((revenue_analysis$revenue_per_year*20) - (20*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 25 years
revenue_analysis$year_25 <- ((revenue_analysis$revenue_per_year*25) - (25*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 30 years
revenue_analysis$year_30 <- ((revenue_analysis$revenue_per_year*30) - (30*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
revenue_plot <- revenue_analysis %>%
select(zipcode,neighbourhood, revenue_per_year) %>%
filter(neighbourhood == c("Manhattan","Brooklyn","Queens","Staten Island"))  %>%
group_by(neighbourhood,zipcode) %>%
summarise_all(funs(median)) %>%
ggplot(aes(x = reorder(zipcode, -revenue_per_year), y = revenue_per_year, fill = neighbourhood )) +
ggtitle("Average Revenue from Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Revenue", x = "Zipcode") +
theme_classic() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =          element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(revenue_plot)
revenue_cost_ratio <- revenue_analysis %>%
group_by(zipcode, current_price) %>%
summarise( mean_revenue_per_year = round(mean(revenue_per_year, na.rm = TRUE), digits = 2),     mean_revenue_5_year = round(mean(year_5, na.rm = TRUE), digits = 2), mean_revenue_10_year = round(mean(year_10, na.rm = TRUE), digits = 2), mean_revenue_15_year = round(mean(year_15, na.rm = TRUE), digits = 2), mean_revenue_20_year = round(mean(year_20, na.rm = TRUE), digits = 2), mean_revenue_25_year = round(mean(year_25, na.rm = TRUE), digits = 2), mean_revenue_30_year = round(mean(year_30, na.rm = TRUE), digits = 2))
revenue_5_years  <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_5_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 5 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_5_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_10_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_10_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 10 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_10_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_15_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_15_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 15 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_15_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_20_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_20_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 20 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_20_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_25_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_25_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 25 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_25_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_30_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_30_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 30 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_30_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
ggarrange(revenue_5_years, revenue_10_years, revenue_15_years, revenue_20_years,revenue_25_years, revenue_30_years, ncol = 3, nrow = 2)
library(tidyr)
library(DT)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(readxl)
library(scales)
library(RColorBrewer)
library(wesanderson)
library(plotly)
library(data.table)
library(ggpubr)
#Reading the variable summary excel File
package_sum <- read_excel("D:/College/Capital One/Data Challenge/CapitalOneDataChallenge_Vipul_Mayank/Package Summary.xlsx")
kable(package_sum) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T )
#Reading the Zillow and Listings Data File
home_price <- read.csv("D:/College/Capital One/Zip_Zhvi_2bedroom.csv")
listings <- read.csv("D:/College/Capital One/listings.csv")
zillow_forecast <- function(tempdf,cityName){ # Zillow data and New york city given as function argument
# Select zillow cost information from last 5 years and modify zillow data (tempdf) to only hold relevant columns
n <- 60
tempdf <- tempdf[,c(2,3,7,(ncol(tempdf) - n):ncol(tempdf))]
tempdf <- filter(tempdf,City == cityName) # Filter for the required city
colnames(tempdf)[colnames(tempdf) == "RegionName"] <- "zipcode" # Set proper column name to be used for merging later
tempdf$currentPrice <- NULL # Create a new column to store the latest price in 2019
# we define a for loop to iterate over each zipcode to obtain latest cost of property
for (i in 1:nrow(tempdf)) {
tmp = ts(as.vector(t(tempdf[,c(4:64)])[,i]),start = c(2012,6),frequency = 12) # Convert the monthly cost data into time series data
ARIMAfit = arima(tmp, order = c(1,1,1), seasonal = list(order = c(1,0,1),period = NA),
method = "ML")# Define ARIMA model to be used for prediction
pred = predict(ARIMAfit, n.ahead = 20)# use the ARIMA model to predict the price
predval <- pred$pred # Store the predicted values in a variable
tempdf$currentPrice[i] <- predval[length(predval)] # set the value of current price for the specific zipcode as price in Jan 2019
}
return(tempdf[,c(1,2,3,65)]) # return the filtered data containing only relevant columns
}
zillow_final <- zillow_forecast(home_price,"New York")
relevantcol <- c("id","zipcode","bedrooms","price","weekly_price","monthly_price","cleaning_fee","neighbourhood_group_cleansed","number_of_reviews","review_scores_rating")
listings_fil <- listings[,relevantcol]
listings_fil <- listings_fil %>% filter(bedrooms == 2)
finalData <- merge(listings_fil,zillow_final,by = c("zipcode")) # merge data sets on zipcode
str(finalData)
colnames(finalData) <-  c("zipcode","id","bedrooms","per_night_price","weekly_price","monthly_price","cleaning_fee","neighbourhood","number_of_reviews","review_scores_rating","city","size_rank","current_price")
finalData$city <- factor(finalData$city, levels = c("New York"))
cols <- c("per_night_price", "weekly_price", "monthly_price","cleaning_fee") # selecting columns to be cleaned
# Specify a function to replace characters with whitespace
replace_dollar <- function(x){
price <- as.numeric(gsub("[$,]","",x)) # this function removes $ from data
return(price)
}
# Apply function to replace characters with whitespace
finalData[cols] <- lapply(finalData[cols], replace_dollar) # running the above defined function on cols
# Final Check of the structure of the data
str(finalData)
datatable(finalData, filter = 'top')
#Reading the variable summary excel File
package_sum <- read_excel("D:/College/Capital One/Data Challenge/CapitalOneDataChallenge_Vipul_Mayank/Variable Summary.xlsx")
kable(package_sum) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T )
finalDataWithCount <- finalData %>%
group_by(zipcode) %>%
summarise(count = n())
ggplot(finalDataWithCount, aes(x = reorder(zipcode,-count), y = count)) +
theme_set(theme_light()) +
geom_bar(stat = "identity", width = .5, fill = "tomato3") +
ggtitle("Number of 2 Bedroom Listings in NYC in each zipcode") +
xlab("Zipcode") +
ylab("Number of 2 Bedroom Listings") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.8))
Neighbourhood_Analysis <- finalData %>%
group_by(finalData$neighbourhood) %>%
summarise(count = n())
ggplot(Neighbourhood_Analysis, aes(x = reorder(`finalData$neighbourhood`,count), y = count, fill = `finalData$neighbourhood`)) +
theme_light() +
geom_bar(stat = "identity", width = .5, fill = "#1F618D") +
coord_flip() +
geom_text(aes(label = count), hjust = 0.0, color = "blue", size = 3.5) +
ggtitle("Number of 2 Bedroom Listings in each Neighbourhood") +
xlab("Neighbourhood") + ylab("Number of 2 Bedroom Listings") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.8))
finalData %>% group_by(zipcode) %>% summarise(reviews_count = sum(number_of_reviews)) %>%
ggplot( aes(x = zipcode, y = reviews_count)) +
geom_segment( aes(x = reorder(zipcode,reviews_count), xend = zipcode, y = 0, yend = reviews_count), color = "blue") +
geom_point( color = "orange", size = 4 ) +
theme_classic() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) +
xlab(" Zipcode ") +
ylab("Number of reviews")
reviews_data <- finalData %>% group_by(neighbourhood, zipcode, size_rank) %>% summarise(reviews_count = sum(number_of_reviews), avg_night_price = round(mean(per_night_price), digits = 2), avg_rating = round(mean(review_scores_rating, na.rm = TRUE), digits = 2))
review_price_plot <- reviews_data %>% arrange(desc(size_rank)) %>%
ggplot(aes(x = reviews_count, y = avg_night_price, size = avg_rating, color = neighbourhood)) +
geom_point(alpha = 0.5) +
labs(y = "Average Price Per Night in that Zipcode", x = "Total Number of Reviews") +
ggtitle("Number of Reviews and Price for Zipcodes in Each Neighbourhood") +
scale_size(range = c(0, 10), name = "Size Rank(M)")
ggplotly(review_price_plot)
medianCost <-  finalData %>%
select(zipcode,neighbourhood, current_price) %>%
filter(neighbourhood == c("Manhattan","Brooklyn","Queens","Staten Island"))  %>%
group_by(neighbourhood,zipcode) %>%
summarise_all(funs(median)) %>%
ggplot(aes(x = reorder(zipcode, -current_price), y = current_price, fill = neighbourhood )) +
ggtitle("Average Cost of Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Cost", x = "Zipcode") +
theme_classic2() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =        element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(medianCost)
revenue_analysis <- finalData
occupancy_rate <- 0.75
Year_days <- 365 # number of days in a year
# Generate the revenue for a year per property
revenue_analysis$revenue_per_year <- occupancy_rate*Year_days*revenue_analysis$per_night_price
# Obtain the Revenue/Cost ratio
revenue_analysis$revenue_cost_ratio <- ((revenue_analysis$revenue_per_year)/(revenue_analysis$current_price))
# Breakeven period
revenue_analysis$breakeven_point <- (revenue_analysis$current_price/(revenue_analysis$revenue_per_year - (occupancy_rate*52*revenue_analysis$cleaning_fee)))
# Revenue earned over 5 years
revenue_analysis$year_5 <- ((revenue_analysis$revenue_per_year*5) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 10 years
revenue_analysis$year_10 <- ((revenue_analysis$revenue_per_year*10) - (10*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 15 years
revenue_analysis$year_15 <- ((revenue_analysis$revenue_per_year*15) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 20 years
revenue_analysis$year_20 <- ((revenue_analysis$revenue_per_year*20) - (20*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 25 years
revenue_analysis$year_25 <- ((revenue_analysis$revenue_per_year*25) - (25*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 30 years
revenue_analysis$year_30 <- ((revenue_analysis$revenue_per_year*30) - (30*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
revenue_plot <- revenue_analysis %>%
select(zipcode,neighbourhood, revenue_per_year) %>%
filter(neighbourhood == c("Manhattan","Brooklyn","Queens","Staten Island"))  %>%
group_by(neighbourhood,zipcode) %>%
summarise_all(funs(median)) %>%
ggplot(aes(x = reorder(zipcode, -revenue_per_year), y = revenue_per_year, fill = neighbourhood )) +
ggtitle("Average Revenue from Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Revenue", x = "Zipcode") +
theme_classic() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =          element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(revenue_plot)
revenue_cost_ratio <- revenue_analysis %>%
group_by(zipcode, current_price) %>%
summarise( mean_revenue_per_year = round(mean(revenue_per_year, na.rm = TRUE), digits = 2),     mean_revenue_5_year = round(mean(year_5, na.rm = TRUE), digits = 2), mean_revenue_10_year = round(mean(year_10, na.rm = TRUE), digits = 2), mean_revenue_15_year = round(mean(year_15, na.rm = TRUE), digits = 2), mean_revenue_20_year = round(mean(year_20, na.rm = TRUE), digits = 2), mean_revenue_25_year = round(mean(year_25, na.rm = TRUE), digits = 2), mean_revenue_30_year = round(mean(year_30, na.rm = TRUE), digits = 2))
revenue_5_years  <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_5_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 5 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_5_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_10_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_10_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 10 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_10_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_15_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_15_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 15 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_15_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_20_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_20_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 20 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_20_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_25_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_25_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 25 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_25_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_30_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_30_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 30 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_30_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
ggarrange(revenue_5_years, revenue_10_years, revenue_15_years, revenue_20_years,revenue_25_years, revenue_30_years, ncol = 3, nrow = 2)
library(tidyr)
library(DT)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(readxl)
library(scales)
library(RColorBrewer)
library(wesanderson)
library(plotly)
library(data.table)
library(ggpubr)
#Reading the variable summary excel File
package_sum <- read_excel("D:/College/Capital One/Data Challenge/CapitalOneDataChallenge_Vipul_Mayank/Package Summary.xlsx")
kable(package_sum) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T )
#Reading the Zillow and Listings Data File
home_price <- read.csv("D:/College/Capital One/Zip_Zhvi_2bedroom.csv")
listings <- read.csv("D:/College/Capital One/listings.csv")
zillow_forecast <- function(tempdf,cityName){ # Zillow data and New york city given as function argument
# Select zillow cost information from last 5 years and modify zillow data (tempdf) to only hold relevant columns
n <- 60
tempdf <- tempdf[,c(2,3,7,(ncol(tempdf) - n):ncol(tempdf))]
tempdf <- filter(tempdf,City == cityName) # Filter for the required city
colnames(tempdf)[colnames(tempdf) == "RegionName"] <- "zipcode" # Set proper column name to be used for merging later
tempdf$currentPrice <- NULL # Create a new column to store the latest price in 2019
# we define a for loop to iterate over each zipcode to obtain latest cost of property
for (i in 1:nrow(tempdf)) {
tmp = ts(as.vector(t(tempdf[,c(4:64)])[,i]),start = c(2012,6),frequency = 12) # Convert the monthly cost data into time series data
ARIMAfit = arima(tmp, order = c(1,1,1), seasonal = list(order = c(1,0,1),period = NA),
method = "ML")# Define ARIMA model to be used for prediction
pred = predict(ARIMAfit, n.ahead = 20)# use the ARIMA model to predict the price
predval <- pred$pred # Store the predicted values in a variable
tempdf$currentPrice[i] <- predval[length(predval)] # set the value of current price for the specific zipcode as price in Jan 2019
}
return(tempdf[,c(1,2,3,65)]) # return the filtered data containing only relevant columns
}
zillow_final <- zillow_forecast(home_price,"New York")
relevantcol <- c("id","zipcode","bedrooms","price","weekly_price","monthly_price","cleaning_fee","neighbourhood_group_cleansed","number_of_reviews","review_scores_rating")
listings_fil <- listings[,relevantcol]
listings_fil <- listings_fil %>% filter(bedrooms == 2)
finalData <- merge(listings_fil,zillow_final,by = c("zipcode")) # merge data sets on zipcode
str(finalData)
colnames(finalData) <-  c("zipcode","id","bedrooms","per_night_price","weekly_price","monthly_price","cleaning_fee","neighbourhood","number_of_reviews","review_scores_rating","city","size_rank","current_price")
finalData$city <- factor(finalData$city, levels = c("New York"))
cols <- c("per_night_price", "weekly_price", "monthly_price","cleaning_fee") # selecting columns to be cleaned
# Specify a function to replace characters with whitespace
replace_dollar <- function(x){
price <- as.numeric(gsub("[$,]","",x)) # this function removes $ from data
return(price)
}
# Apply function to replace characters with whitespace
finalData[cols] <- lapply(finalData[cols], replace_dollar) # running the above defined function on cols
# Final Check of the structure of the data
str(finalData)
datatable(finalData, filter = 'top')
#Reading the variable summary excel File
package_sum <- read_excel("D:/College/Capital One/Data Challenge/CapitalOneDataChallenge_Vipul_Mayank/Variable Summary.xlsx")
kable(package_sum) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T )
finalDataWithCount <- finalData %>%
group_by(zipcode) %>%
summarise(count = n())
ggplot(finalDataWithCount, aes(x = reorder(zipcode,-count), y = count)) +
theme_set(theme_light()) +
geom_bar(stat = "identity", width = .5, fill = "tomato3") +
ggtitle("Number of 2 Bedroom Listings in NYC in each zipcode") +
xlab("Zipcode") +
ylab("Number of 2 Bedroom Listings") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.8))
Neighbourhood_Analysis <- finalData %>%
group_by(finalData$neighbourhood) %>%
summarise(count = n())
ggplot(Neighbourhood_Analysis, aes(x = reorder(`finalData$neighbourhood`,count), y = count, fill = `finalData$neighbourhood`)) +
theme_light() +
geom_bar(stat = "identity", width = .5, fill = "#1F618D") +
coord_flip() +
geom_text(aes(label = count), hjust = 0.0, color = "blue", size = 3.5) +
ggtitle("Number of 2 Bedroom Listings in each Neighbourhood") +
xlab("Neighbourhood") + ylab("Number of 2 Bedroom Listings") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.8))
finalData %>% group_by(zipcode) %>% summarise(reviews_count = sum(number_of_reviews)) %>%
ggplot( aes(x = zipcode, y = reviews_count)) +
geom_segment( aes(x = reorder(zipcode,reviews_count), xend = zipcode, y = 0, yend = reviews_count), color = "blue") +
geom_point( color = "orange", size = 4 ) +
theme_classic() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
) +
xlab(" Zipcode ") +
ylab("Number of reviews")
reviews_data <- finalData %>% group_by(neighbourhood, zipcode, size_rank) %>% summarise(reviews_count = sum(number_of_reviews), avg_night_price = round(mean(per_night_price), digits = 2), avg_rating = round(mean(review_scores_rating, na.rm = TRUE), digits = 2))
review_price_plot <- reviews_data %>% arrange(desc(size_rank)) %>%
ggplot(aes(x = reviews_count, y = avg_night_price, size = avg_rating, color = neighbourhood)) +
geom_point(alpha = 0.5) +
labs(y = "Average Price Per Night in that Zipcode", x = "Total Number of Reviews") +
ggtitle("Number of Reviews and Price for Zipcodes in Each Neighbourhood") +
scale_size(range = c(0, 10), name = "Size Rank(M)")
ggplotly(review_price_plot)
medianCost <-  finalData %>%
select(zipcode,neighbourhood, current_price) %>%
filter(neighbourhood == c("Manhattan","Brooklyn","Queens","Staten Island"))  %>%
group_by(neighbourhood,zipcode) %>%
summarise_all(funs(median)) %>%
ggplot(aes(x = reorder(zipcode, -current_price), y = current_price, fill = neighbourhood )) +
ggtitle("Average Cost of Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Cost", x = "Zipcode") +
theme_classic2() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =        element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(medianCost)
revenue_analysis <- finalData
occupancy_rate <- 0.75
Year_days <- 365 # number of days in a year
# Generate the revenue for a year per property
revenue_analysis$revenue_per_year <- occupancy_rate*Year_days*revenue_analysis$per_night_price
# Obtain the Revenue/Cost ratio
revenue_analysis$revenue_cost_ratio <- ((revenue_analysis$revenue_per_year)/(revenue_analysis$current_price))
# Breakeven period
revenue_analysis$breakeven_point <- (revenue_analysis$current_price/(revenue_analysis$revenue_per_year - (occupancy_rate*52*revenue_analysis$cleaning_fee)))
# Revenue earned over 5 years
revenue_analysis$year_5 <- ((revenue_analysis$revenue_per_year*5) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 10 years
revenue_analysis$year_10 <- ((revenue_analysis$revenue_per_year*10) - (10*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 15 years
revenue_analysis$year_15 <- ((revenue_analysis$revenue_per_year*15) - (5*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 20 years
revenue_analysis$year_20 <- ((revenue_analysis$revenue_per_year*20) - (20*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 25 years
revenue_analysis$year_25 <- ((revenue_analysis$revenue_per_year*25) - (25*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
# Revenue earned over 30 years
revenue_analysis$year_30 <- ((revenue_analysis$revenue_per_year*30) - (30*occupancy_rate*52*revenue_analysis$cleaning_fee)) - revenue_analysis$current_price
revenue_plot <- revenue_analysis %>%
select(zipcode,neighbourhood, revenue_per_year) %>%
filter(neighbourhood == c("Manhattan","Brooklyn","Queens","Staten Island"))  %>%
group_by(neighbourhood,zipcode) %>%
summarise_all(funs(median)) %>%
ggplot(aes(x = reorder(zipcode, -revenue_per_year), y = revenue_per_year, fill = neighbourhood )) +
ggtitle("Average Revenue from Listings in various Zipcodes") +
geom_bar(stat = "identity") + scale_y_continuous(labels = scales::comma) +
labs(y = "Average Revenue", x = "Zipcode") +
theme_classic() +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor =          element_blank(),panel.border = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1)) + guides(fill = guide_legend(title = "Neighbourhood"))
ggplotly(revenue_plot)
revenue_cost_ratio <- revenue_analysis %>%
group_by(zipcode, current_price) %>%
summarise( mean_revenue_per_year = round(mean(revenue_per_year, na.rm = TRUE), digits = 2),     mean_revenue_5_year = round(mean(year_5, na.rm = TRUE), digits = 2), mean_revenue_10_year = round(mean(year_10, na.rm = TRUE), digits = 2), mean_revenue_15_year = round(mean(year_15, na.rm = TRUE), digits = 2), mean_revenue_20_year = round(mean(year_20, na.rm = TRUE), digits = 2), mean_revenue_25_year = round(mean(year_25, na.rm = TRUE), digits = 2), mean_revenue_30_year = round(mean(year_30, na.rm = TRUE), digits = 2))
revenue_5_years  <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_5_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 5 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_5_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_10_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_10_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 10 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_10_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("red", "green"))
revenue_15_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_15_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 15 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_15_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_20_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_20_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 20 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_20_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_25_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_25_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 25 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_25_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
revenue_30_years <- ggplot(revenue_cost_ratio, aes(y = mean_revenue_30_year , x = zipcode)) +
coord_flip() +
labs(y = "Profit in 30 years", x = "Zipcode") +
geom_bar(aes(fill = mean_revenue_30_year < 0), stat = "identity") + scale_fill_manual(guide = FALSE, breaks =                     c(TRUE, FALSE), values = c("green", "red"))
ggarrange(revenue_5_years, revenue_10_years, revenue_15_years, revenue_20_years,revenue_25_years, revenue_30_years, ncol = 3, nrow = 2)
seed = read.table('http://archive.ics.uci.edu/ml/machine-learning-databases/00236/seeds_dataset.txt', header = F)
seed = seed[,1:7]
colnames(seed) = c("area", "perimeter","campactness", "length", "width", "asymmetry", "groovelength")
seed <- scale(seed)
library(factoextra)
install.packages("factoextra")
library(factoextra)
distance <- get_dist(seed)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
head(distance)
distance
# K-Means Cluster Analysis
fit <- kmeans(seed, 2) #2 cluster solution
#Display number of clusters in each cluster
table(fit$cluster)
fit
fviz_cluster(fit, data = seed)
fit$totss
fit$tot.withinss
fit$betweenss
fit$withinss
fviz_cluster(fit, data = seed)
k3 <- kmeans(seed, centers = 3, nstart = 25)
k4 <- kmeans(seed, centers = 4, nstart = 25)
k5 <- kmeans(seed, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(fit, geom = "point", data = seed) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = seed) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = seed) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = seed) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow = 2)
install.packages("fpc")
library(fpc)
plotcluster(seed, fit$cluster)
# Determine number of clusters
wss <- (nrow(seed)-1)*sum(apply(seed,2,var))
wss
fit$totss
for (i in 2:12) wss[i] <- sum(kmeans(seed,
centers=i)$withinss)
wss
plot(1:12, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
prediction.strength(seed, Gmin=2, Gmax=15, M=10,cutoff=0.8)
prediction.strength(seed, Gmin=2, Gmax=15, M=10,cutoff=0.5)
d = dist(seed, method = "euclidean")
result = matrix(nrow = 14, ncol = 3)
for (i in 2:15){
cluster_result = kmeans(seed, i)
clusterstat=cluster.stats(d, cluster_result$cluster)
result[i-1,1]=i
result[i-1,2]=clusterstat$avg.silwidth
result[i-1,3]=clusterstat$dunn
}
plot(result[,c(1,2)], type="l", ylab = 'silhouette width', xlab = 'number of clusters')
result
plot(result[,c(1,3)], type="l", ylab = 'dunn index', xlab = 'number of clusters')
#Wards Method or Hierarchical clustering
#Calculate the distance matrix
seed.dist=dist(seed)
#Obtain clusters using the Wards method
seed.hclust=hclust(seed.dist, method="ward")
plot(seed.hclust)
#Cut dendrogram at the 3 clusters level and obtain cluster membership
seed.3clust = cutree(seed.hclust,k=3)
#See exactly which item are in third group
seed[seed.3clust==3,]
#get cluster means for raw data
#Centroid Plot against 1st 2 discriminant functions
#Load the fpc library needed for plotcluster function
library(fpc)
#plotcluster(ZooFood, fit$cluster)
plotcluster(seed, seed.3clust)
install.packages("arules")
library(arules)
data("Groceries")
summary(Groceries)
Groceries
head(Groceries)
#
itemFrequencyPlot(Groceries, support = 0.1, cex.names=0.8)
# Run the apriori algorithm
basket_rules <- apriori(Groceries,parameter = list(sup = 0.003, conf = 0.5,target="rules"))
summary(basket_rules)
inspect(head(basket_rules))
#Basket rules of size greater than 4
inspect(subset(basket_rules, size(basket_rules)>4))
install.packages('arulesViz')
library('arulesViz')
plot(basket_rules)
plot(basket_rules)
plot(basket_rules, interactive=TRUE)
plot(head(sort(basket_rules, by="lift"), 10), method = "graph")
